generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

// ##################### 每日下班提醒 #####################

// 工作日流水记录
model WorkdayRecord {
  id        String  @id @default(cuid())
  date      String
  isWorkDay Boolean

  allCompanyRecords   DailyCompanyRecord[]
  allWorkplaceRecords DailyWorkplaceRecord[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// 公司
model Company {
  id          String  @id @default(cuid())
  company     String
  stockCode   String?
  salaryDate  Int?
  offworkTime String?

  allDailyRecords  DailyCompanyRecord[]
  allWorkplaces    Workplace[]
  allMessageRobots MessageRobot[]

  OffworkNoticeSetting OffworkNoticeSetting[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// 每日公司状况记录
model DailyCompanyRecord {
  id             String  @id @default(cuid())
  salaryDate     String?
  restDays       Int?
  todayStock     Float?
  yesterdayStock Float?
  delta          Float?

  beloneToWorkday WorkdayRecord @relation(fields: [workdayRecordId], references: [id], onDelete: Cascade)
  workdayRecordId String
  belongToCompany Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String

  DailyOffworkNoticeRecord DailyOffworkNoticeRecord[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// 工作地点
model Workplace {
  id           String  @id @default(cuid())
  city         String
  weatherCode  String?
  oilpriceCode String?
  mapLatitude  String?
  mapLongitude String?

  belongToCompany Company @relation(fields: [companyId], references: [id])
  companyId       String

  allDailyRecords      DailyWorkplaceRecord[]
  OffworkNoticeSetting OffworkNoticeSetting[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("City")
}

// 每日工作地点状况记录
model DailyWorkplaceRecord {
  id                  String  @id @default(cuid())
  todayWeather        String?
  todayTemperature    String?
  todayWid            String?
  tomorrowWeather     String?
  tomorrowTemperature String?
  tomorrowWid         String?

  h92            Float?
  h95            Float?
  h98            Float?
  traffic        String?
  trafficImage   String?
  trafficViewUrl String?

  belongToWorkday   WorkdayRecord @relation(fields: [workdayRecordId], references: [id], onDelete: Cascade)
  workdayRecordId   String
  belongToWorkplace Workplace     @relation(fields: [workplaceId], references: [id], onDelete: Cascade)
  workplaceId       String        @map("cityId")

  DailyOffworkNoticeRecord DailyOffworkNoticeRecord[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("DailyCityRecord")
}

// 消息机器人类型
enum MessageRobotType {
  DINGTALK
  WXBIZ
  FEISHU
}

// 消息机器人
model MessageRobot {
  id                  String           @id @default(cuid())
  name                String
  type                MessageRobotType
  accessToken         String?
  secret              String?
  extraAuthentication Json?
  desc                String?

  belongToCompany Company? @relation(fields: [companyId], references: [id])
  companyId       String?

  belongToUser User?   @relation(fields: [userId], references: [id])
  userId       String?

  OffworkNoticeSetting OffworkNoticeSetting[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// Offwork 公司-地点-机器人配置表
model OffworkNoticeSetting {
  id       String  @id @default(cuid())
  disabled Boolean @default(false)

  OffworkNoticeMailSubscription OffworkNoticeMailSubscription[]

  belongToRobot     MessageRobot @relation(fields: [messageRobotId], references: [id])
  messageRobotId    String
  belongToCompany   Company      @relation(fields: [companyId], references: [id])
  companyId         String
  belongToWorkplace Workplace    @relation(fields: [workplaceId], references: [id])
  workplaceId       String       @map("cityId")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// Offwork 订阅的邮件列表
model OffworkNoticeMailSubscription {
  id       String  @id @default(cuid())
  disabled Boolean @default(false)
  mail     String
  label    String

  belongToSetting        OffworkNoticeSetting @relation(fields: [offworkNoticeSettingId], references: [id])
  offworkNoticeSettingId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// 每日需发消息记录表
model DailyOffworkNoticeRecord {
  id       String  @id @default(cuid())
  imageUrl String?

  beloneToCompanyRecord   DailyCompanyRecord   @relation(fields: [dailyCompanyRecordId], references: [id])
  dailyCompanyRecordId    String
  beloneToWorkplaceRecord DailyWorkplaceRecord @relation(fields: [dailyWorkplaceRecordId], references: [id])
  dailyWorkplaceRecordId  String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ##################### Git 智能周报 #####################

// Git 仓库状态
enum GitCommonStatus {
  INIT
  READY
  PENDING
  ERROR
}

// Git 项目
model GitProject {
  id String @id @default(cuid())

  name         String
  weeklyStatus GitCommonStatus @default(INIT)
  publicKey    String?
  privateKey   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  repos     GitRepo[]
  staffs    GitStaff[]
  GitReport GitReport[]
}

// Git 仓库
model GitRepo {
  id String @id @default(cuid())

  name           String
  url            String
  status         GitCommonStatus @default(INIT)
  lastSync       DateTime?
  recentBranches String[]        @default([])
  recentCommits  GitCommit[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  GitProject   GitProject? @relation(fields: [gitProjectId], references: [id])
  gitProjectId String?
}

// Git 用户
model GitStaff {
  id String @id @default(cuid())

  name             String
  emails           String[] @default([])
  alternativeNames String[] @default([])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  GitProject   GitProject? @relation(fields: [gitProjectId], references: [id])
  gitProjectId String?
  GitReport    GitReport[]
}

// Git 提交记录
model GitCommit {
  id String @id @default(cuid())

  hash        String
  dateString  String
  message     String
  authorName  String
  authorEmail String
  refs        String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  GitRepo   GitRepo? @relation(fields: [gitRepoId], references: [id])
  gitRepoId String?
}

// Git 报告
model GitReport {
  id String @id @default(cuid())

  content String?

  gitProjectId    String
  gitStaffId      String
  beloneToProject GitProject @relation(fields: [gitProjectId], references: [id])
  beloneToStaff   GitStaff   @relation(fields: [gitStaffId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ##################### 用户与身份 #####################

// 身份
enum Role {
  ADMIN
  STAFF
  USER
}

// 用户
model User {
  id String @id @default(cuid())

  name     String
  password String
  role     Role   @default(USER)

  MessageRobot MessageRobot[]
  Shorts       Shorts[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ##################### 短网址 #####################

// 短网址类型
enum ShortsType {
  SYSTEM // 系统级短链，为 4 位 HEX
  OFFWORK // 系统级下班提醒短链
  ALIAS // 别名短链，用户自行指定
  USER // 用户级短链，8 位 HEX
}

// 短网址记录
model Shorts {
  id String @id @default(cuid())

  url       String
  key       String
  expiredAt DateTime?
  type      ShortsType?

  author User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
